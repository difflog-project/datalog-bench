.type part_id
.type part_name
.type supplier_key

.decl Rule(n: number)
.input Rule

.decl input1(v0: supplier_key, v1: part_id)
.input input1

.decl input2(v0: part_id, v1: part_name)
.input input2

.decl input1_notexists(v0: supplier_key, v1: part_id, r: number)
.output input1_notexists

.decl input2_notexists(v0: part_id, v1: part_name, r: number)
.output input2_notexists

.decl ans_notexists(v0: part_name, r: number)
.output ans_notexists



input1_notexists(v0, v1, r) :- input1(v0, v1), Rule(r).
input2_notexists(v0, v1, r) :- input2(v0, v1), Rule(r).
ans_notexists(v0, r) :- ans_notexists(v0, r), Rule(r), r != 0, Rule(0).
ans_notexists(v0, r) :- ans_notexists(v0, r), ans_notexists(v0, r), Rule(r), r != 1, Rule(1).
ans_notexists(v0, r) :- ans_notexists(v0, r), ans_notexists(v0, r), ans_notexists(v0, r), Rule(r), r != 2, Rule(2).
ans_notexists(v0, r) :- ans_notexists(v0, r), ans_notexists(v1, r), ans_notexists(v1, r), Rule(r), r != 3, Rule(3).
ans_notexists(v0, r) :- ans_notexists(v1, r), ans_notexists(v1, r), ans_notexists(v0, r), Rule(r), r != 4, Rule(4).
ans_notexists(v0, r) :- ans_notexists(v1, r), ans_notexists(v0, r), ans_notexists(v1, r), Rule(r), r != 5, Rule(5).
